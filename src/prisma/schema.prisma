generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CENTRAL_REP
  REGIONAL_REP
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(REGIONAL_REP)
  telegramId            BigInt?   @unique
  telegramNotifications Boolean   @default(true)
  emailNotifications    Boolean   @default(true)

  Account        Account[]
  Representation Representation[]

  notifications  Notification[]
  SupportMessage SupportMessage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FederalDistrict {
  id   String @id @default(uuid())
  name String @unique

  Region Region[]
}

model Region {
  id         String @id @default(uuid())
  name       String @unique
  districtId String

  FederalDistrict       FederalDistrict         @relation(fields: [districtId], references: [id])
  Representation        Representation[]
  RepresentationRequest RepresentationRequest[]
}

model Representation {
  id        String   @id @default(uuid())
  regionId  String   @unique
  userId    String   @unique
  createdAt DateTime @default(now()) @db.Date()

  Region       Region         @relation(fields: [regionId], references: [id])
  Event        Event[]
  Plan         Plan[]
  User         User           @relation(fields: [userId], references: [id])
  Team         Team[]
  ResultEvents ResultEvents[]
}

enum Status {
  DRAFT
  PENDING
  APPROVED
  COMPLETED
  REFUSED
}

model RepresentationRequest {
  id            String  @id @default(uuid())
  regionId      String
  name          String
  email         String  @unique
  status        Status  @default(DRAFT)
  refusalReason String?

  Region Region @relation(fields: [regionId], references: [id])
}

model Team {
  id               String  @id @default(uuid())
  representationId String
  name             String
  trainer          String?
  representative   String?

  Representation    Representation      @relation(fields: [representationId], references: [id])
  TeamsOfEvents     TeamsOfEvents[]
  SportsmansOfTeams SportsmansOfTeams[]
}

model SportsmansOfTeams {
  sportsmanId String
  teamId      String

  Sportsman Sportsman @relation(fields: [sportsmanId], references: [id])
  Team      Team      @relation(fields: [teamId], references: [id])

  @@id([sportsmanId, teamId])
}

model Sportsman {
  id     String   @id @default(uuid())
  name   String
  bdate  DateTime @db.Date
  isMale Boolean

  SportsmansOfTeams SportsmansOfTeams[]
}

model SportObject {
  id      String @id @default(uuid())
  name    String
  address String

  Event Event[]
}

model Discipline {
  id   String @id
  name String @unique

  DisciplinesOfEvents DisciplinesOfEvents[]
}

enum EventLevel {
  REGION
  FEDREAL_DISTRICT
  ALL_RUSSIA
}

model Event {
  id                String     @id @default(uuid())
  representationId  String?
  level             EventLevel @default(REGION)
  title             String
  ageRange          String
  start             DateTime   @db.Date
  end               DateTime   @db.Date
  isOnline          Boolean    @default(false)
  sportObjectsId    String?
  participantsCount Int        @db.SmallInt
  status            Status     @default(DRAFT)
  refusalReason     String?

  Representation      Representation?       @relation(fields: [representationId], references: [id])
  DisciplinesOfEvents DisciplinesOfEvents[]
  SportObject         SportObject?          @relation(fields: [sportObjectsId], references: [id])
  TeamsOfEvents       TeamsOfEvents[]
  ResultEvents        ResultEvents[]
}

model TeamsOfEvents {
  teamId  String
  eventId String
  place   Int    @db.SmallInt

  Team  Team  @relation(fields: [teamId], references: [id])
  Event Event @relation(fields: [eventId], references: [id])

  @@id([teamId, eventId])
}

model Plan {
  id               String @id @default(uuid())
  representationId String
  year             Int    @db.SmallInt
  status           Status @default(DRAFT)

  Representation Representation @relation(fields: [representationId], references: [id])
}

model DisciplinesOfEvents {
  disciplineId String
  eventId      String

  Discipline Discipline @relation(fields: [disciplineId], references: [id])
  Event      Event      @relation(fields: [eventId], references: [id])

  @@id([disciplineId, eventId])
}

model ResultEvents {
  id               String  @id @default(uuid())
  eventId          String
  representationId String?
  fileName         String
  filePath         String

  Event          Event           @relation(fields: [eventId], references: [id])
  Representation Representation? @relation(fields: [representationId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
}

model SupportMessage {
  id         String   @id @default(uuid())
  tgAuthorId BigInt
  request    String
  response   String?
  solved     Boolean  @default(false)
  createdAt  DateTime @default(now())
  answeredAt DateTime @updatedAt

  User User @relation(fields: [tgAuthorId], references: [telegramId])
}
